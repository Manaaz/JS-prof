const modal=document.querySelector("#modal"),screen=document.querySelector(".screen"),sections=document.querySelectorAll(".section"),next=document.querySelector("#next"),span=document.getElementsByClassName("close")[0];let currentSection=0;function imageOnClickModal(t){let e=document.getElementsByClassName("modalImg"),s=document.getElementById(t),n=document.getElementById("img01");e[0].style.display="block",n.src=s.src}span.onclick=function(){document.getElementsByClassName("modalImg")[0].style.display="none"};var basket={items:[],totalItems:0,summ:0,addItem:function(t){let e=this.items.find((e=>e.name==t.name));null==e?this.items.push(t):(e.count=e.count+1,e.summ=e.count*e.price)},getSumm:function(){let t=0,e=0;for(let s=0;s<this.items.length;s++)price=this.items[s].price,count=this.items[s].count,e+=count,t+=count*price;this.totalItems=e,this.summ=t}};function getItem(t){return{id:t[0],name:t[1],price:t[2],count:t[3],summ:t[2]*t[3]}}function addItemOnBasket(t){null!=t&&(item=getItem(t),basket.addItem(item),basket.getSumm(),updateBasket())}function updateBasketItems(t){if(t<=basket.items.length){let e=document.getElementById("basket-item-count-"+t);basket.items[t].count=Number(e.value),updateBasket()}}function deleteItemFromBasket(t){t<=basket.items.length&&(basket.items.splice(t,1),updateBasket())}function updateBasket(){let t=document.getElementById("basket_id");t.style.display="flex",t.style.flexDirection="column";let e="",s="";if(0==basket.items.length)e="<p>Корзина пуста!</p>",t.innerHTML=e;else{e="",t.innerHTML=e,totalItems=0,totalSum=0;for(let t=0;t<basket.items.length;t++){let e=basket.items[t].count;basket.items[t].summ=e*basket.items[t].price,totalItems+=e,totalSum+=basket.items[t].summ;let n=basket.items[t];s+=`<div id="item-${t}" class="basket-item">  \n                    <div class="basket-item-left">\n                        <p><b>Наименование: </b> ${n.name}</p>\n                        <p><b>Количество: </b>\n                            <input type="number" id="basket-item-count-${t}" class="basket-item-counter" value="${n.count}"  onchange="updateBasketItems(${t})"></input>\n                        </p>\n                        <p><b>Цена: </b>\n                            ${n.price}\n                        </p>\n                        <p><b>Сумма: </b>\n                            <p id="itemSum" class="basket-item-sum">${n.summ}</p>\n                        </p>\n                        <button data-id="${t}" class="basket-item_btn" onclick="deleteItemFromBasket(${t})">Удалить</button>\n                    </div>\n                    <div class="basket-item-right">\n                        <img src="img/${n.id}.jpg" alt="${n.title}" class="rounded mx-auto d-block">\n                    </div>\n                </div>`}t.insertAdjacentHTML("beforeend",s),basket.totalItems=totalItems,basket.summ=totalSum;let n=document.createElement("basketSummary");n.style.display="flex",n.style.flexDirection="column",n.innerHTML="<hr><p>В корзине: "+basket.totalItems+" товаров на сумму: "+basket.summ+" рублей</p>",t.appendChild(n)}}function openBasket(){modal.style.display="block",updateBasket()}function showSection(t){sections[currentSection].classList.remove("opened"),sections[t].classList.add("opened"),currentSection=t}screen.addEventListener("click",(function(t){modal.style.display="none"})),document.addEventListener("keydown",(function(t){"Escape"==t.key&&(modal.style.display="none")})),next.addEventListener("click",(function(){currentSection+1<sections.length&&showSection(currentSection+1)})),prev.addEventListener("click",(function(){currentSection-1>=0&&showSection(currentSection-1)})),showSection(0);const $catalog=document.querySelector(".catalog"),API_URL="https://raw.githubusercontent.com/GeekBrainsTutorial/online-store-api/master/responses";class Api{constructor(){this.url="/goods.json"}fetch(t,e){let s;window.XMLHttpRequest?s=new XMLHttpRequest:window.ActiveXObject&&(s=new ActiveXObject("Microsoft.XMLHTTP")),s.onreadystatechange=function(){4===s.readyState&&(200===s.status?e(JSON.parse(s.responseText)):s.status>400&&t())},s.open("GET",this.url,!0),s.send()}}class GoodsItem{constructor(t,e,s){this.id=t,this.title=e,this.price=s}getHtml(){return`  \n        <div class="card col-sm-2">\n            <div class="card-img">\n              <img src="img/catalogItem-${this.id}.jpg" alt="${this.title}" class="rounded mx-auto d-block">\n            </div>\n            <div class="card-body">\n                <h5 class="card-title">${this.title}</h5>\n                <p class="card-text text-price">${this.price}</p>\n                <a class="btn btn-primary" id="catalogItem-${this.id}">Купить</a>\n            </div>\n        </div>\n        `}}class GoodsList{constructor(){this.api=new Api,this.$goodsList=$catalog,this.goods=[],this.api.fetch(this.onFetchError.bind(this),this.onFetchSuccess.bind(this))}onFetchSuccess(t){this.goods=t.map((({id:t,title:e,price:s})=>new GoodsItem(t,e,s))),this.render(),this.addBtnEvent()}onFetchError(t){this.$goodsList.insertAdjacentHTML("beforeend","<h3>Произошла ошибка</h3>")}fetchGoods(){}render(){this.$goodsList.textContent="",this.goods.forEach((t=>{this.$goodsList.insertAdjacentHTML("beforeend",t.getHtml())}))}addBtnEvent(){for(let t=0;t<this.goods.length;t++){let e=this.goods[t];document.getElementById("catalogItem-"+e.id).addEventListener("click",(function(){addItemOnBasket(["catalogItem-"+e.id,e.title,e.price,1])}))}}}class basketClass{constructor(){this.goods=[]}addItem(){}delItem(){}getSumm(){}render(){}}class basketItem{constructor(t,e,s,n){this.id=t,this.title=e,this.price=n,this.count=this.count+s}}const goodsList=new GoodsList;